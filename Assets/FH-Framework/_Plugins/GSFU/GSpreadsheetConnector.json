{"files":[{"id":"417b537c-d001-4eea-b199-8553a426d057","name":"Code","type":"server_js","source":"function doGet(e)\n{\n  if (!Pass(e))\n    return \"Incorrect Password.\";\n    \n  var result \u003d ParseRequest(e);\n \n  return result;\n}\n\n// ************** Elemental Security Check **************\n\nfunction Pass(e)\n{\n  var ss \u003d SpreadsheetApp.openById(e.parameters.ssid);\n  var sheet \u003d ss.getSheetByName(\"passcode\");\n  var sheetPass \u003d sheet.getDataRange().getValue();\n  \n  if (e.parameters.pass[0] \u003d\u003d sheetPass)\n    return true;\n  else\n    return false;\n}\n\n// ************** Parse Flow Init **************\n\nfunction ParseRequest(e)\n{\n  var result;\n\n  if (e.parameters.action \u003d\u003d \"GetData\")\n    result \u003d GetData(e);\n  \n  if (e.parameters.action \u003d\u003d \"SetData\")\n    result \u003d SetData(e);\n  \n  return ContentService.createTextOutput(JSON.stringify(result)).setMimeType(ContentService.MimeType.JSON);\n}\n\n// ************** Retrieving Data **************\n\nfunction GetData(e)\n{ \n  var o \u003d QueryDataFromSS(e.parameters.ssid, e.parameters.sheet);\n  \n  return o;\n}\n\nfunction QueryDataFromSS(id, sheetName)\n{\n  var ss \u003d SpreadsheetApp.openById(id);\n  var sheet \u003d ss.getSheetByName(sheetName);\n\n  var dataRange \u003d sheet.getDataRange().offset(1, 0, sheet.getDataRange().getNumRows()-1);\n  var objects \u003d getRowsData(sheet, dataRange);\n\n  return objects;\n}\n\nfunction getRowsData(sheet, range, columnHeadersRowIndex)\n{\n  if (!columnHeadersRowIndex)\n  {\n    if (range.getRowIndex() - 1 !\u003d 0)\n      columnHeadersRowIndex \u003d range.getRowIndex() - 1;\n    else\n      columnHeadersRowIndex \u003d 1;\n  }\n   \n  var numColumns \u003d range.getLastColumn() - range.getColumn() + 1;\n  var headersRange \u003d sheet.getRange(columnHeadersRowIndex, range.getColumn(), 1, numColumns);\n  var headers \u003d headersRange.getValues()[0];\n  return getObjects(range.getValues(), headers);\n}\n\nfunction getObjects(data, keys)\n{\n  var objects \u003d [];\n  for (var i \u003d 0; i \u003c data.length; ++i) {\n    var object \u003d {};\n    var hasData \u003d false;\n    for (var j \u003d 0; j \u003c data[i].length; ++j) {\n      var cellData \u003d data[i][j];\n      if (isCellEmpty(cellData)) {\n        continue;\n      }\n      object[keys[j]] \u003d cellData;\n      hasData \u003d true;\n    }\n    if (hasData) {\n      objects.push(object);\n    }\n  }\n  return objects;\n}\n\nfunction isCellEmpty(cellData)\n{\n  return typeof(cellData) \u003d\u003d \"string\" \u0026\u0026 cellData \u003d\u003d \"\";\n}\n\n// ************** Saving Data **************\n\nfunction SetData(e)\n{   \n  var ss \u003d SpreadsheetApp.openById(e.parameters.ssid);\n  var sheet \u003d ss.getSheetByName(e.parameters.sheet);\n  \n  var ballName \u003d e.parameters.val1;\n  var ballBounce \u003d e.parameters.val2;\n  \n  var rowArray \u003d [new Date().toTimeString(), ballName.toString(), ballBounce.toString()];\n  \n  sheet.appendRow(rowArray);\n  \n  return \"RCVD OK\";\n}\n"}]}