using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Hash17.Devices;
using Hash17.Programs.Util;
using Hash17.Utils;
using JetBrains.Annotations;

namespace Hash17.Programs.Implementation
{
    public class Exploit : Program
    {
        #region Properties

        public Dictionary<string, List<Payload>> PayloadsByExploit = new Dictionary<string, List<Payload>>();
        private string _previousCarrotLabel = string.Empty;

        public const string HelpCommand = "help";
        public const string ListCommand = "list";
        public const string RunCommand = "run";
        public const string UseCommand = "use";
        public const string ExitCommand = "exit";

        public const string PayloadParameter = "payload";
        public const string ExploitParameter = "exploit";
        public const string TargetParameter = "target";

        #endregion

        #region State

        private string _currentExploit;
        private Payload _currentPayload;
        private Device _currentTarget;

        #endregion

        protected override IEnumerator InnerExecute()
        {
            yield return null;

            ManuallyFinished = true;

            Alias.Term.ShowUserLocationLabel = false;
            Alias.Term.TreatInput = false;
            Alias.Term.ShowTextWhenNotTreatingInput = true;
            _previousCarrotLabel = Alias.Term.CarrotLabel.text;
            Alias.Term.CarrotLabel.text = "exploit{0}".InLineFormat(Alias.Config.CarrotChar);
            Alias.Term.OnInputSubmited += OnInputSubmited;
        }

        private void OnInputSubmited(string inputSubmited)
        {
            string programName;
            string parameters;
            Interpreter.GetProgram(inputSubmited, out programName, out parameters);
            programName = programName.ToLower();
            if (string.IsNullOrEmpty(programName))
            {
                Alias.Term.ShowText(TextBuilder.ErrorText("Invalid command name.\n Type help to see avaialable commands."));
                return;
            }

            switch (programName)
            {
                case ListCommand:
                    List(parameters);
                    break;
                case UseCommand:
                    Use(parameters);
                    break;
                case RunCommand:
                    Run();
                    break;
                case ExitCommand:
                    Exit();
                    break;
                case HelpCommand:
                default:
                    ShowHelp();
                    break;
            }
        }

        #region List

        private void List(string parameter)
        {
            switch (parameter)
            {
                case ExploitParameter:
                    ListExploit();
                    break;
                case PayloadParameter:
                    ListPayloads();
                    break;
                case TargetParameter:
                    ListTargets();
                    break;
                default:
                    Alias.Term.ShowText("Invalid parameter.");
                    ShowHelp();
                    break;
            }
        }

        private void Use(string parameter)
        {
            // TODO: validate parts length

            var parts = parameter.Split(' ');
            var paramName = parts[0];
            var paramValue = parts[1];
            switch (paramName)
            {
                case ExploitParameter:
                    UseExploit(paramValue);
                    break;
                case PayloadParameter:
                    UsePayload(paramValue);
                    break;
                case TargetParameter:
                    UseTarget(paramValue);
                    break;
                default:
                    Alias.Term.ShowText("Invalid parameter.");
                    ShowHelp();
                    break;
            }
        }

        #endregion

        #region Target

        private void ListTargets()
        {
            ProgramUtil.ShowDevices();
        }

        private void UseTarget(string target)
        {
            if (!Alias.Devices.GetDeviceById(target, out _currentTarget))
            {
                var message = "Target not found!\nUse 'list tagets' to see available targets.\nYou should pass the 'ID' to 'set target'.\nEg: 'set target VP'.";
                Alias.Term.ShowText(TextBuilder.ErrorText(message));
            }
        }

        #endregion

        #region Exploit

        private void ListExploit()
        {
            using (var enumerator = PayloadsByExploit.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    var current = enumerator.Current;
                    Alias.Term.ShowText("Exploit ID: {0}".InLineFormat(current.Key));
                }
            }
        }

        private void UseExploit(string exploit)
        {
            if (PayloadsByExploit.ContainsKey(exploit))
            {
                _currentExploit = exploit;
            }
            else
            {
                var message = "Exploit not found. Use 'list exploits' to see available exploits.\n" +
                              "Use the 'Exploit ID' value to set a exploit to use.\n" +
                              "Eg: 'use exploit exploit_i_want'.";

                Alias.Term.ShowText(TextBuilder.ErrorText(message));
            }
        }

        #endregion

        #region Payload

        private void ListPayloads()
        {
            var payloads = PayloadsByExploit[_currentExploit];
            Alias.Term.ShowText("PAYLOADS:");
            for (int i = 0; i < payloads.Count; i++)
            {
                Alias.Term.ShowText(payloads[i].Name);
            }
        }

        private void UsePayload(string payloadToUse)
        {
            var payloads = PayloadsByExploit[_currentExploit];
            if ((_currentPayload = payloads.Find(p => p.Name == payloadToUse)) == null)
            {
                var message = "Payload not found. Use 'list payloads' to see a list of available paylods.\n" +
                              "Use the the payload name to set a payload to use.\n" +
                              "Eg: 'use payload payload_to_use'.";
            }
        }

        #endregion

        #region Running

        private void Run()
        {
            {
                bool error = false;
                if (_currentTarget == null)
                {
                    Alias.Term.ShowText(TextBuilder.ErrorText("Target not set."));
                    error = true;
                }

                if (string.IsNullOrEmpty(_currentExploit))
                {
                    Alias.Term.ShowText(TextBuilder.ErrorText("Exploit not set."));
                    error = true;
                }

                if (_currentPayload == null)
                {
                    Alias.Term.ShowText(TextBuilder.ErrorText("Payload not set."));
                    error = true;
                }

                if (error)
                    return;
            }

            StartCoroutine(_currentPayload.Run(_currentTarget));
        }

        #endregion

        #region Show Help

        private void ShowHelp()
        {
            Alias.Term.ShowText("HELP");
        }

        #endregion

        #region Exit

        private void Exit()
        {
            Alias.Term.CarrotLabel.text = _previousCarrotLabel;
            Alias.Term.ShowUserLocationLabel = true;
            Alias.Term.TreatInput = true;
            Alias.Term.ShowTextWhenNotTreatingInput = false;
            Alias.Term.OnInputSubmited -= OnInputSubmited;
            FinishExecution();
        }

        #endregion

        #region Aditional Data

        public override void CacheAditionalData()
        { 
            if (PayloadsByExploit == null)
                PayloadsByExploit = new Dictionary<string, List<Payload>>();

            PayloadsByExploit.Add("bluetooth_v2.2", new List<Payload>() { new RemoteTerminalPayload(), });
        }

        #endregion
    }
}